#  _	 __
# | | / /
# | |/ / _	 _	___ ____
# |		 \| | | |/ _ \_  /	Author: Kyoz
# | |\	\ |_| | (_) / /		Github: github.com/banminkyoz
# \_| \_/\__, |\___/___|	Email : banminkyoz@gmail.com
#					__/ |
#				 |___/

#  DEFINING {{{

snippet f Function
	function ${1:name}() {
		${0}
	}
snippet af Arrow function
  (${1}) => {${2}}
snippet rq Require
	const ${1} = require('${0}');

#  }}}

# IMPORT {{{

snippet ip Import
	import { ${0} } from '${1:path}';
snippet ipa Import all
	import * as ${0} from '${1:path}';

# }}}

# CONDITIONS {{{

snippet	if If statement
	if (${1:condition}) {
		${0}
	}
snippet	ifelse If else statement
	if (${1:condition}) {
		${2}
	} else {
		${3}
	}
snippet	switch Perform different actions based on different conditions
	switch(${1}) {
		case valueOne:
		  // Code block
			break;
		case valueTwo:
		  // Code block
			break;
		default:
			${0}
	}

# }}}

# ITERABLE {{{

snippet for Iterating over iterable objects by index
	for (let i = 0; i < ${1:array}.length; i++) {
		${2:// Content}
	}
snippet	forr Iterating over iterable objects by index (Reverse)
	for (let i =	${1:array}.length - 1; i >= 0; i--) {
		${2:// Content}
	}
snippet forin Iterating over property values of iterable objects
	for (const item in ${1}) {
		${2:// Content}
	}
snippet forof Iterating over property names of iterable objects
	for (const item of ${1}) {
		${2:// Content}
	}

# }}}

# GET DOM ELEMENT {{{

snippet getAll Find HTML element by CSS selectors
	document.querySelectorAll('${1:selector}');
snippet	getId Find HTML element by id
	document.getElementById('${1:id}');
snippet	getClass Find HTML element by class name
	document.getElementsByClassName('${1:className}');
snippet	getTag Find HTML element by tag name
	document.getElementByTagName('${1:tagName}');

# }}}

# CONSOLE LOG {{{

snippet	log Log to console
	console.log(${0});
snippet	loge Log error to console
	console.error(${0});
snippet	logt Log tabular data as a table
	console.table(${0});
snippet	logc Log with color
	console.log('%c ${0} ', 'color: #ff9400');
snippet	logbg Log with background
	console.log('%c ${0} ', 'background: #222; color: #bada55');

# }}}

# INTERVAL & TIMEOUT {{{

snippet	timeout Executes the given function after the specified delay miliseconds
	setTimeout(() => {
		${2:// Content}
	}, ${1:miliseconds})

snippet	interval Executes the given function after at specified intervals 
	setInterval(() => {
		${2:// Content}
	}, ${1:miliseconds})

# }}}

